name: LLVM/Clang build

on: push

env:
  LLVM_VERSION: ${{ '13.0.0' }}
  COMMON_CMAKE_VARS: ${{ '-DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_TOOLS=OFF -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DLLVM_BUILD_LLVM_DYLIB=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_ZLIB=OFF DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_TERMINFO=OFF' }}

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
          - os: macos-10.15
          - os: windows-2019
            arch: 'Win32'
          - os: windows-2019
            arch: 'x64'

    runs-on: ${{ matrix.os }}

    name: Build - ${{ matrix.os }} ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v2

      - name: Create package name - Unix
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          echo "PACKAGE_NAME=vf-llvm-clang-build-$(git describe --always)" >> $GITHUB_ENV

      - name: Create package name - Windows
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          echo "PACKAGE_NAME=vf-llvm-clang-build-$(git describe --always)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Ninja - Unix
        if: ${{ runner.os != 'windows-2019' }}
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Download llvm-project source
        run: |
          cd ${{ runner.temp }}
          git clone --depth 1 --branch llvmorg-${{ env.LLVM_VERSION }} https://github.com/llvm/llvm-project

      - name: Create build/installation directory - Unix
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          mkdir ${{ runner.temp }}/build
          mkdir ${{ runner.temp }}/${{ env.PACKAGE_NAME }}
        
      - name: Create build/installation directory - Windows
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          New-Item -Path ${{ runner.temp }} -Name "build" -ItemType "directory"
          New-Item -Path ${{ runner.temp }} -Name "${{ env.PACKAGE_NAME }}" -ItemType "directory"

      - name: Configure build - Windows
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.os == 'windows-2019' }}
        with:
          arch: ${{ matrix.arch }}

      - name: Build - Unix
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd ${{ runner.temp }}/build
          mkdir Release
          cmake -G Ninja ${{ env.COMMON_CMAKE_VARS }} -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/${{ env.PACKAGE_NAME }} ${{ runner.temp }}/llvm-project/llvm
          cmake --build . --target install --config Release

      - name: Build - Windows
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          cd ${{ runner.temp }}/build
          cmake ${{ env.COMMON_CMAKE_VARS }} -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/${{ env.PACKAGE_NAME }} -DLLVM_TARGETS_TO_BUILD=X86 -G "Visual Studio 16 2019" -A ${{ matrix.arch }} -Thost=x64 ${{ runner.temp }}/llvm-project/llvm
          msbuild ${{ runner.temp }}/build/INSTALL.vcxproj -p:Configuration=Release -p:Platform=${{ matrix.arch }} -m

      # Otherwise, execution permissions are lost for binaries when the 'upload Package' action is used
      - name: Create build tarball - Unix
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd ${{ runner.temp }}
          tar -cvzf ${{ env.PACKAGE_NAME }}-${{ runner.os }}.tar.gz ${{ env.PACKAGE_NAME }}
          
      # Install cygwin so we can use GNU tar (instead of Windows' tar)
      - name: Set up Cygwin
        if: ${{ matrix.os == 'windows-2019' }}
        uses: egor-tensin/setup-cygwin@v3
          
      - name: Create build tarball - Windows
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          cd ${{ runner.temp }}
          C:\tools\cygwin\bin\tar.exe -cvzf ${{ env.PACKAGE_NAME }}-${{ runner.os }}-${{ matrix.arch }}.tar.gz ${{ env.PACKAGE_NAME }}

      - name: Produce shasum 256 - Unix
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          shasum -a 256 ${{ runner.temp }}/${{ env.PACKAGE_NAME }}-${{ runner.os }}.tar.gz

      - name: Produce shasum 256 - Windows
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Get-FileHash -PATH "${{ runner.temp }}\${{ env.PACKAGE_NAME }}-${{ runner.os }}.tar.gz" -Algorithm SHA256

      - name: upload Package
        uses: actions/upload-artifact@v2.2.3
        with:
          name: vf-llvm-clang-${{ runner.os }}
          path: ${{ runner.temp }}/${{ env.PACKAGE_NAME }}-${{ runner.os }}.tar.gz
